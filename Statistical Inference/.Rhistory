install.packages(opim, dependencies = TRUE)
install.packages(optim, dependencies = TRUE)
install.packages("optim", dependencies = TRUE)
install.packages("optim", dependencies = TRUE)
install.packages("optimx", dependencies = TRUE)
?optimize
source('~/Desktop/optimizq.R')
library(optimx)
source('~/Desktop/optimizq.R')
source('~/Desktop/optimizq.R')
source('~/Desktop/optimizq.R')
source('~/Desktop/optimizq.R')
View(tmp)
source('~/Desktop/optimizq.R')
source('~/Desktop/optimizq.R')
View(tmp)
source('~/Desktop/optimizq.R')
source('~/Desktop/optimizq.R')
z
source('~/Desktop/optimizq.R')
View(tmp)
source('~/Desktop/optimizq.R')
View(tmp)
source('~/Desktop/optimizq.R')
View(tmp)
source('~/Desktop/optimizq.R')
View(tmp)
source('~/Desktop/optimizq.R')
View(tmp)
source('~/Desktop/optimizq.R')
View(tmp)
source('~/Desktop/optimizq.R')
View(tmp)
source('~/Desktop/optimizq.R')
View(tmp)
?lm
source('~/Desktop/optimizq.R')
View(tmp)
data(mtcars)
podaci <- mtcars
View(mtcars)
View(mtcars)
source('~/Desktop/optimizq.R')
q
x <- mean(c(8.58, 10.46, 9.01, 9.64, 8.86))
x-8.58
source('~/Desktop/optimizq.R')
source('~/Desktop/optimizq.R')
source('~/Desktop/optimizq.R')
View(blj)
source('~/Desktop/optimizq.R')
View(blj)
blj[1]
blj[2]
source('~/Desktop/optimizq.R')
blj[1][2]
source('~/Desktop/optimizq.R')
source('~/Desktop/optimizq.R')
sd(c(8.58, 10.46, 9.01, 9.64, 8.86))
1/sd(c(8.58, 10.46, 9.01, 9.64, 8.86))
1/sd(c(8.58, 10.46, 9.01, 9.64, 8.86)) * 8.58
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean(x)
0.75*1.33
8.58*1.3313
8.58*1.3313-9.31
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
TUROPOLJE <- lm(y ~ x)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
source('~/Desktop/optimizq.R')
View(Turopolje2)
source('~/Desktop/optimizq.R')
View(Turopolje2)
# load libraries
library(utils)      # for download.file()
## assuming the name of the needed file in the dataset is "activity.csv"
# create temp file, and download dataset to temp file (method='curl' for 'https' url)
temp <- tempfile()
URL <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(URL, temp, method = 'curl')
# read in data; remove temp file
activity_data <- read.csv(unz(temp, "activity.csv"))
unlink(temp)
# load libraries
library(dplyr)      ## manipulate the data
library(lubridate)  ## for ymd_hm function
library(chron)      ## for times class
# convert dataframe to tbl_df (dplyr)
activity_data <- tbl_df(activity_data)
# add variable 'date_times' (POSIXct class) to dataset
activity_data <- activity_data %>%
mutate(date_times = seq(from = ymd_hm("2012.10.1 0:0", tz = "UTC"), to = ymd_hm("2012.11.30 23:55"), by = 300))
# create char vector of sequence of 5-minute intervals over a 24-hour period
interval_seq <- format(seq(c(ISOdatetime(2012,10,1,0,0,0)), by = 300, length.out = 288), "%H:%M:%S")
# add 'interval_seq' to dataset; convert from char to times vector
activity_data$interval_seq <-interval_seq
activity_data <- activity_data %>%
mutate(interval_seq = chron(times. = interval_seq))
library(dplyr)      ## manipulate the data
library(lubridate)  ## for ymd_hm function
library(chron)
library(dplyr)      ## manipulate the data
library(lubridate)  ## for ymd_hm function
library(chron)
install.packages(dplyr, dependencies = TRUE)
install.packages("dplyr", dependencies = TRUE)
install.packages("dplyr", dependencies = TRUE)
install.packages("lubridate", dependencies = TRUE)
install.packages("dplyr", dependencies = TRUE)
install.packages("dplyr", dependencies = TRUE)
install.packages("ggplot2", dependencies = TRUE)
install.packages("ggplot2", dependencies = TRUE)
install.packages("dplyr")
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
sas <- lm (y ~ x)
summary(sas)
sd(residuals(sas))
residuals(sas)
sd(residuals(sas))
mean(residuals(sas))
mtcars <- data("mtcars")
?mtcars
mtcars
data(mtcars)
View(mtcars)
sas <- lm(mtcars[,"mpg"] ~ mtcars[,"wt"])
summary(sas)
sas <- lm(mpg ~ wt, data = mtcars)
summary(sas)
confint(sas, mpg, level=0.95)
confint(sas, "mpg", level=0.95)
sas <- lm(mpg ~ wt, data = mtcars)
summary(sas)
confint(int, 'mpg', level = 0.95)
confint(sas, 'mpg', level = 0.95)
sas(mean(mtcars[,"wt"]))
predict.lm(sas, mean(mtcars[,"wt"]),level = 0.95)
sas <- lm(mpg ~ wt, data = mtcars)
predict.lm(sas, mean(mtcars[,"wt"]),level = 0.95)
predict.lm("sas", mean(mtcars[,"wt"]),level = 0.95)
predict.lm(sas, mean(mtcars[,"wt"]),level = 0.95)
mean(mtcars[,"wt"]
mean(mtcars[,"wt"])
predict.lm(sas, 3.21725,level = 0.95)
predict.lm(sas, data.frame(3.21725),level = 0.95)
predict.lm(sas, wt = data.frame(3.21725),level = 0.95)
predict.lm(sas, wt = data.frame(3.21725))
predict.lm(sas, data.frame(3.21725))
predict.lm(sas, wt = data.frame(3.21725))
sas$coefficients
sas$coefficients[1]
sas$coefficients[1]+2
sas$coefficients[1] + mean(wt)*sas$coefficients[2] - 2*3.046
sas$coefficients[1] + mean(mtcars[,"wt"])*sas$coefficients[2] - 2*3.046
mean(mtcars[,"wt"])
37.28513 - 3.21725 * 5.3445
sd(sas$residuals)
sas$residuals
37.28513 - 3.21725 * 5.3445 - 2 * 0.5591
?mtcars
predict(sas, data.frame(3), interval = "confidence")
predict(sas, data.frame(wt = 3), interval = "confidence")
predict(sas, data.frame(wt = 3), interval = "confidence", level = 0.95)
predict(sas, data.frame(wt = 3.217), interval = "confidence", level = 0.95)
predict(sas, data.frame(wt = 3), interval = "confidence", level = 0.95)
37.28513 - 3 * 5.3445 + 2 * 0.5591
?mtcars
predict(sas, data.frame(wt = 3), interval = "prediction", level = 0.95)
predict(sas, data.frame(wt = 2), interval = "confidence", level = 0.95)
summary(sas)
?lm
sum(sas$residuals)
sas2 <- lm(mpg ~ sas$residuals[1], data = mtcars)
sas$residuals[1]-mtcars[,"mpg"]
((sas$residuals[1]-mtcars[,"mpg"])^2)
sum((sas$residuals[1]-mtcars[,"mpg"])^2)
sum(sas$residuals^2)
sum((sas$coefficients[1]-mtcars[,"mpg"])^2)
sum((sas$coefficients[1]-mtcars[,"mpg"])^2) / sum(sas$residuals^2)
sum((sas$residuals)^2)
sum((sas$coefficients[1] - mtcars[,"mpg"])^2)
sum((mean(mtcars[,"mpg"]) - mtcars[,"mpg"])^2)
predict.lm(sas, wt = data.frame(2), level = 0.95)
predict.lm(sas, data.frame(wt = 2), level = 0.95)
predict.lm(sas, data.frame(wt = 2), level = 0.95, interval = "confidence")
predict.lm(sas, data.frame(wt = 2), level = 0.95, interval = "prediction")
summary(sas)
fit <- lm(mpg ~ I(wt / 2), data = mtcars)
coef <- summary(fit)$coefficients
mean <- coef[2,1]
stderr <- coef[2,2]
df <- fit$df
#Two sides T-Tests
mean + c(-1,1) * qt(0.975, df = df) * stderr
?qt
fit$df
install.packages("shiny", dependencies = TRUE)
? shiny
?shiny
??shiny
install.packages("manipulate", dependencies = TRUE)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
install.packages("rChart", dependencies = TRUE)
install.packages("rchart", dependencies = TRUE)
data(galton)
?manipulate
setwd("~/GitHub/datasciencecoursera/statinference")
