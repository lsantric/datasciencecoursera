listMeans <- data.table(unlist(lapply(1:1000, function (x) { mean(rexp(40, 0.2)) })))
listMean <- mean(listMeans[,listMeans])
setnames(listMeans, "listMeans")
mean(listMeans[,listMeans])
mean(listMeans[,listMeans])
mean(listMeans[,listMeans])
mean(listMeans[,listMeans])
listMean <- mean(listMeans[,listMeans])
source('~/.active-rstudio-document', echo=TRUE)
```
source('~/.active-rstudio-document', echo=TRUE)
library(data.table)
library(ggplot2)
library(gridExtra)
listMeans <- data.table(unlist(lapply(1:1000, function (x) { mean(rexp(40, 0.2)) })))
listMean <- mean(listMeans[,listMeans])
setnames(listMeans, "listMeans")
library(gridExtra)
listMeans <- data.table(unlist(lapply(1:1000, function (x) { mean(rexp(40, 0.2)) })))
Mean <- mean(listMeans[,listMeans])
library(data.table)
library(ggplot2)
library(gridExtra)
listMeans <- data.table(unlist(lapply(1:1000, function (x) { mean(rexp(40, 0.2)) })))
Mean <- mean(listMeans[,listMeans])
setnames(listMeans, "listMeans")
Mean <- mean(listMeans[,listMeans])
listMeans <- data.table(unlist(lapply(1:1000, function (x) { mean(rexp(40, 0.2)) })))
Mean <- mean(listMeans[,listMeans])
Mean <- mean(listMeans[,listMeans])
View(listMeans)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
data("ToothGrowth")
View(ToothGrowth)
?ToothGrowth
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(ToothGrowth)
source('~/.active-rstudio-document', echo=TRUE)
mean(ToothGrowth[,dose])
mean(ToothGrowth[,supp])
View(ToothGrowth)
source('~/.active-rstudio-document', echo=TRUE)
ggplot(ToothGrowth, aes(x=dose)) +
geom_histogram() +
ggtitle("Dose histogram") +
geom_vline(aes(xintercept = mean(ToothGrowth[,dose]),colour = "Mean"),show_guide = TRUE);
setwd("~/GitHub/datasciencecoursera/repre/Storm report")
stormData <- fread(https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2)
stormData <- fread("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2")
stormData <- read.table("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2")
stormData <- read.table("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2")
stormData <- read.csv("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2")
stormData <- read.csv2("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2")
stormData <- fread("repdata-data-StormData")
stormData <- fread("repdata-data-StormData.csv")
?fread
stormData <- fread("repdata-data-StormData.csv", sep="auto")
stormData <- fread("repdata-data-StormData.csv", sep=",")
stormData <- fread("repdata-data-StormData.csv", sep=",\n")
stormData <- fread("repdata-data-StormData.csv", sep="auto")
stormData <- read.csv("repdata-data-StormData.csv", sep="auto")
stormData <- read.csv("repdata-data-StormData.csv")
View(stormData)
View(stormData)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(fatal)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(fatal)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
data.table(head(fatal))[,Fatalities]
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
stormData <- read.csv("repdata-data-StormData.csv")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(stormData)
packages.update(9)
update.packages()
update.packages(data.table)
update.package(data.table)
install.packages("data.table")
install.packages("data.table")
install.packages("data.table")
source('~/.active-rstudio-document', echo=TRUE)
View(stormData)
10^3
?data.table
damage <- stormData[,sum(PROPDMG), by = c("PROPDMGEXP", "EVTYPE")]
View(damage)
as.numeric("asdasd")
source('~/.active-rstudio-document', echo=TRUE)
View(damage)
source('~/.active-rstudio-document', echo=TRUE)
View(damage)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
damage[,V1:=sum(absDMG, na.rm = TRUE), by=EVTYPE]
damage2 <- damage[,sum(absDMG, na.rm = TRUE), by=EVTYPE]
View(damage2)
source('~/.active-rstudio-document', echo=TRUE)
View(damage)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
update.packages(ask = FALSE)
stormData <- fread("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2")
install.packages("curl", dependencies = TRUE)
install.packages("curl", dependencies = TRUE)
install.packages("curl", dependencies = TRUE)
install.packages("ghostscript")
install.packages("Ghostscript")
knit('StormReport.Rmd')
library(knitr)
library(markdown)
knit('StormReport.Rmd')
library(rmarkdown)
knit('StormReport.Rmd')
library(knitr)
library(knitr)
knit('StormReport.Rmd')
install.packages("knitr", dependencies = TRUE)
knit('StormReport.Rmd')
library(knitr)
knit('StormReport.Rmd')
qt(c(.05, .95))*30
qt(c(.05, .95), df = 1)*30
qt(c(.05, .95), df = 9)*30
qt(c(.025, .975), df = 9)*30
qt(c(.025, .975), df = 8)*30
?qt
qt(c(.025, .975), df = 8)
2/2.306
qt(c(0, .95), df = 8)
1.859548*2.1
qt(c(0, .95), df = 8, lower.tail = TRUE)
qt(c(0, .95), df = 8, lower.tail = FALSE)
qt(c(0, .95), df = 7)
qt(c(.025, .975), df = 7)
qt(c(.025, .975), df = 7)
qt(c(.1, .9), df = 7)
qt(c(-Inf, .95), df = 7)
qt(c(0, .95), df = 7)
6/2.364624
ci_high = 0
m = -2
n = 9
sd<-ci_high - m * sqrt(n) / qt(p=.95+(1-.95)/2, df=n-1)
sd
qt(p=.95+(1-.95)/2, df=n-1)
qt(c(0.025, 0.975), df=9)*sqrt(1.28/9)
qt(c(0.025, 0.975), df=9)*sqrt(1.28/10)
baseLine <- c(140, 150, 135, 138, 148)
week2 <- c(132, 135, 151, 146, 130)
hist(baseLine)
hist(baseLine, breaks = 5)
hist(baseLine, breaks = 1)
hist(baseLine, breaks = 10)
sd(baseLine)
var(baseLine)
6.49**2
errorVar <- var(baseLine) + var(week2)
errorMean <- mean(baseLine) - mean(week2)
?qt
errorSD <- sqrt(var(baseLine)**2 / 5 + var(week2)**2 / 5)
rt(5, 4, errorMean)
pt(errorMean, 4)
1 - pt(errorMean, 4)
pt(errorMean/errorSD, 4)
t.test(baseLine, week2)
t.test(c(8,3,1,2,5))
t.test(c(8,3,-1,2,5))
qt(0.95, 8)
qt(0.95, 8)*30/9
qt(0.95, 8)*30/3
t.test(c(0 0 0 1))
t.test(c(0, 0, 0, 1))
?t.test
t.test(c(0, 0, 0, 1), alternative = c("less"), paired = TRUE)
t.test(c(0, 0, 0, 1), alternative = c("less"))
t.test(c(0, 0, 0, 1), alternative = c("greater"))
t.test(c(0, 0, 1, 1), c(0, 0, 1, 1), alternative = c("less"), paired = TRUE)
t.test(c(0, 0, 1, 1), c(0, 0, 0, 1), alternative = c("less"), paired = TRUE)
t.test(c(0, 0, 1, 1), c(0, 0, 0, 1), alternative = c("greater"), paired = TRUE)
10/1787
# Regression Models
# Coursera
# Quiz 3
# Bastiaan Quast
# Question 1
data(mtcars)
fit <- lm(mpg ~ factor(cyl) + wt, mtcars)
summary(fit)
# Question 2
fit2 <- lm(mpg ~ factor(cyl), mtcars)
summary(fit2)
# Question 3
fit3 <- lm(mpg ~ factor(cyl)*wt, mtcars)
summary(fit3)
# Question 4
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
# Question 5
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
lm.influence(fit)$hat
# Question 6
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y~x)
lm.influence(fit)$hat
dfbetas(fit)
View(mtcars)
View(mtcars)
# Consider the following data set
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
# Give the hat diagonal for the most influential point
fit <- lm(y ~ x)
hatvalues(fit)
# Consider the following data set
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
# Give the slope dfbeta for the point with the highest hat value.
fit <- lm(y ~ x)
dfbetas(fit)
library(MASS)
data(shuttle)
# convert outcome to 0 = noauto, 1 = auto
shuttle$use <- factor(shuttle$use, levels = c("auto", "noauto"), labels = c(1, 0))
fit1 <- glm(use ~ wind - 1, data = shuttle, family = "binomial")
summary(fit)
windhead <- fit1$coef[1]
windtail <- fit1$coef[2]
exp(windtail)/exp(windhead)
library(MASS)
data(shuttle)
# convert outcome to 0 = noauto, 1 = auto
shuttle$use <- factor(shuttle$use, levels = c("auto", "noauto"), labels = c(1, 0))
# Question 2
# Consider the previous problem. Give the estimated odds ratio for autoloader
# use comparing head winds (numerator) to tail winds (denominator) adjusting for
# wind strength from the variable magn.
fit2 <- glm(use ~ wind + magn - 1, data = shuttle, family = "binomial")
summary(fit)
windhead2 <- fit2$coef[1]
windtail2 <- fit2$coef[2]
exp(windtail2)/exp(windhead2)
shuttle$auto <- as.numeric(shuttle$use=="auto")
fit <- glm(auto ~ wind,  binomial,  shuttle)
fit3 <- glm(1-auto ~ wind,  binomial, shuttle)
fit$coefficients
fit3$coefficients
data(InsectSprays)
fit <- glm(count ~ spray  - 1, family = "poisson", data = InsectSprays)
exp(fit$coef[1])/exp(fit$coef[2])
# Using a knot point at 0, fit a linear model that looks like a hockey stick
# with two lines meeting at x=0. Include an intercept term, x and the knot point
# term. What is the estimated slope of the line after 0?
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
# lin.mod <- lm(y ~ x)
# segmented.mod <- segmented(lin.mod, seg.Z = ~ x, psi = 0)
#
# summary(segmented.mod)
#
# plot(x, y)
# plot(segmented.mod, add = TRUE)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
lhs <- function(x) ifelse(x < 0,0-x,0) # basis function 1 (lhs = left hockey stick)
rhs <- function(x) ifelse(x > 0,x-0,0) # basis function 2 (rhs = right hockey stick)
gb <- lm(y ~ lhs(x) + rhs(x))
x <- seq(-5,5,by=1)
py <- gb$coef[1]+gb$coef[2]*lhs(x)+gb$coef[3]*rhs(x)
lines(x, py)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
lhs <- function(x) ifelse(x < 0,0-x,0) # basis function 1 (lhs = left hockey stick)
rhs <- function(x) ifelse(x > 0,x-0,0) # basis function 2 (rhs = right hockey stick)
gb <- lm(y ~ lhs(x) + rhs(x))
x <- seq(-5,5,by=1)
py <- gb$coef[1]+gb$coef[2]*lhs(x)+gb$coef[3]*rhs(x)
lines(x, py)
plot(x, y)
plot(segmented.mod, add = TRUE)
lin.mod <- lm(y ~ x)
segmented.mod <- segmented(lin.mod, seg.Z = ~ x, psi = 0)
#
summary(segmented.mod)
#
plot(x, y)
plot(segmented.mod, add = TRUE)
lin.mod <- lm(y ~ x)
segmented.mod <- segmented(lin.mod, seg.Z = ~ x, psi = 0)
summary(segmented.mod)
plot(x, y)
plot(segmented.mod, add = TRUE)
data(mtcars)
fit1 <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
print(fit1)
glm(count ~ x + offset(t), family = poisson)
LogiRegUseMinus<-glm((1-shuttle$use)~shuttle$wind,family="binomial")
glm(formula = 1-use ~ factor(wind), family = binomial(logit), data = shuttle1)
LogiRegUseMinus<-glm((1-shuttle$use)~shuttle$wind,family="binomial")
glm(formula = 1-use ~ factor(wind), family = binomial(logit), data = shuttle)
#Q1
library(MASS)
shuttle1<-shuttle
levels(shuttle1$use)[1]<-"1"
levels(shuttle1$use)[2]<-"0"
shuttle1$use<-as.numeric(as.character(shuttle1$use))
glm(formula = use ~ factor(wind), family = binomial(logit), data = shuttle1)
1/exp(0.03181)
#Q2
summary(logRegshuttle <- glm(use ~ wind,family="binomial", data=shuttle1))
glm(formula = use ~ factor(wind)+magn, family = binomial(logit), data = shuttle1)
1/exp(0.03201)
#Q3
LogiRegUseMinus<-glm((1-shuttle$use)~shuttle$wind,family="binomial")
glm(formula = 1-use ~ factor(wind), family = binomial(logit), data = shuttle1)
1-0.03181
#Q4
exp(coef(glm(count ~ as.factor(spray) - 1, family="poisson", InsectSprays)))
14.5/15.333
data(InsectSprays)
InsectSprays
pspray <- glm(InsectSprays$count ~ factor(InsectSprays$spray),family="Poisson")
pspray <- glm(InsectSprays$count ~ factor(InsectSprays$spray),family="poisson")
summary(pspray)
exp(2.659)
#Q5
y=c(1:10)
x=y-1+rnorm(10)/10
z=c(1:10)
z=z*2
summary(lm(y~x+offset(z)))
z=z*4
summary(lm(y~x+offset(z)))
z=z+5
summary(lm(y~x+offset(z)))
z=z+100
summary(lm(y~x+offset(z)))
z=z/10
summary(lm(y~x+offset(z)))
z=z+log(10)
summary(lm(y~x+offset(z)))
#Q6
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(y ~ x)
d1 <- c(0, 0 ,0, 0, 0,  0,  1 , 1,  1 , 1 , 1)
d2 <- c(1, 1 ,1, 1, 1,  1,  0 , 0,  0, 0 , 0)
summary(lm(y ~ d1*x))
y=c(1:10)
x=y-1+rnorm(10)/10
z=c(1:10)
z=z+log(10)
summary(lm(y~x+offset(z)))
log(10)
10.38 + log(10)
input01 <- read.delim("~/Desktop/input01.txt", header=FALSE)
View(input01)
input01 <- input01[2:end]
input01 <- input01[2:length(input01)]
plot input01
print input01
sum(is.na(input01))
input01 <- input01[2:length(input01)]
View(input01)
input01 <- read.delim("~/Desktop/input01.txt", header=FALSE)
View(input01)
sum(is.na(input01))
sum(is.integer(input01))
sum(is.factor(input01))
input01[input01<0,]
input01[input01>0,]
input01[input01>100,]
input01[input01>100,]
input01[input01=100,]
input01[input01==100,]
tail(input01)
corr(input01[,"V1"], input01[,"V2"])
cor(input01[,"V1"], input01[,"V2"])
cor(input01[,"V1"], input01[,"V3"])
cor(input01[,"V2"], input01[,"V3"])
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
install.packages(AppliedPredictiveModeling, dependencies = TRUE)
install.packages('AppliedPredictiveModeling', dependencies = TRUE)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
install.packages("caret", dependencies = TRUE)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
install.packages("ggplot2", dependencies = TRUE)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(ggplot2)
install.packages("ggplot2",  dependencies = TRUE)
library(ggplot2)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
install.packages("AppliedPredictiveModeling", dependencies = TRUE)
install.packages("AppliedPredictiveModeling", dependencies = TRUE)
update.packages()
install.packages("AppliedPredictiveModeling", dependencies = TRUE)
update.packages()
install.packages("ggplot2", dependencies = TRUE)
install.packages("ggplot2", dependencies = TRUE)
install.packages(c('plyr', 'reshape2', 'scales'), dependencies = TRUE)
install.packages("ggplot2", dependencies = TRUE)
install.packages('Rcpp', dedependencies = TRUE)
install.packages('Rcpp', dependencies = TRUE)
install.packages(c('plyr', 'reshape2', 'scales'), dependencies = TRUE)
install.packages("codetools")
install.packages(c('plyr', 'reshape2', 'scales'), dependencies = TRUE)
install.packages(c('plyr', 'reshape2', 'scales'))
install.packages("ggplot2",)
install.package("Rcpp")
install.packages("Rcpp")
install.packages('https://cran.rstudio.com/src/contrib/Rcpp_0.12.1.tar.gz')
install.packages('https://cran.rstudio.com/src/contrib/Rcpp_0.12.2.tar.gz')
r
ver
install.packages('https://cran.r-project.org/src/contrib/Rcpp_0.12.2.tar.gz')
install.packages('https://cran.r-project.org/src/contrib/Rcpp_0.12.2.tar.gz', repos=NULL, method="libcurl"))
install.packages('https://cran.r-project.org/src/contrib/Rcpp_0.12.2.tar.gz', repos=NULL, method="libcurl")
install.packages("AppliedPredictiveModeling", dependencies = TRUE)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
View(segmentationOriginal)
View(segmentationOriginal)
seed = 125
seed.set(125)
Sys.getenv("LANG")
Sys.setenv(LANG="en_US.UTF-8")
knit('ExcercizeQualityPrediction-project.Rmd', encoding = 'UTF-8')
library(knitr)
knit('ExcercizeQualityPrediction-project.Rmd', encoding = 'UTF-8')
knit('./ExcercizeQualityPrediction-project.Rmd', encoding = 'UTF-8')
setwd("~/GitHub/datasciencecoursera/Practical Machine Learning")
knit('./ExcercizeQualityPrediction-project.Rmd', encoding = 'UTF-8')
source('~/.active-rstudio-document', echo=TRUE)
boostModel
boostModel
randomForestModel
write.table(dataPML)
View(nsv)
View(nsv)
write.csv(dataPML, file = "dataPML.csv")
write.csv(dataPMLtest, file = "dataPMLtest.csv")
