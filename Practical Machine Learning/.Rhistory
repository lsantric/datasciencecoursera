summary(lm(y~x+offset(z)))
z=z/10
summary(lm(y~x+offset(z)))
z=z+log(10)
summary(lm(y~x+offset(z)))
#Q6
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(y ~ x)
d1 <- c(0, 0 ,0, 0, 0,  0,  1 , 1,  1 , 1 , 1)
d2 <- c(1, 1 ,1, 1, 1,  1,  0 , 0,  0, 0 , 0)
summary(lm(y ~ d1*x))
y=c(1:10)
x=y-1+rnorm(10)/10
z=c(1:10)
z=z+log(10)
summary(lm(y~x+offset(z)))
log(10)
10.38 + log(10)
input01 <- read.delim("~/Desktop/input01.txt", header=FALSE)
View(input01)
input01 <- input01[2:end]
input01 <- input01[2:length(input01)]
plot input01
print input01
sum(is.na(input01))
input01 <- input01[2:length(input01)]
View(input01)
input01 <- read.delim("~/Desktop/input01.txt", header=FALSE)
View(input01)
sum(is.na(input01))
sum(is.integer(input01))
sum(is.factor(input01))
input01[input01<0,]
input01[input01>0,]
input01[input01>100,]
input01[input01>100,]
input01[input01=100,]
input01[input01==100,]
tail(input01)
corr(input01[,"V1"], input01[,"V2"])
cor(input01[,"V1"], input01[,"V2"])
cor(input01[,"V1"], input01[,"V3"])
cor(input01[,"V2"], input01[,"V3"])
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
install.packages(AppliedPredictiveModeling, dependencies = TRUE)
install.packages('AppliedPredictiveModeling', dependencies = TRUE)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
install.packages("caret", dependencies = TRUE)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
install.packages("ggplot2", dependencies = TRUE)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(ggplot2)
install.packages("ggplot2",  dependencies = TRUE)
library(ggplot2)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
install.packages("AppliedPredictiveModeling", dependencies = TRUE)
install.packages("AppliedPredictiveModeling", dependencies = TRUE)
update.packages()
install.packages("AppliedPredictiveModeling", dependencies = TRUE)
update.packages()
install.packages("ggplot2", dependencies = TRUE)
install.packages("ggplot2", dependencies = TRUE)
install.packages(c('plyr', 'reshape2', 'scales'), dependencies = TRUE)
install.packages("ggplot2", dependencies = TRUE)
install.packages('Rcpp', dedependencies = TRUE)
install.packages('Rcpp', dependencies = TRUE)
install.packages(c('plyr', 'reshape2', 'scales'), dependencies = TRUE)
install.packages("codetools")
install.packages(c('plyr', 'reshape2', 'scales'), dependencies = TRUE)
install.packages(c('plyr', 'reshape2', 'scales'))
install.packages("ggplot2",)
install.package("Rcpp")
install.packages("Rcpp")
install.packages('https://cran.rstudio.com/src/contrib/Rcpp_0.12.1.tar.gz')
install.packages('https://cran.rstudio.com/src/contrib/Rcpp_0.12.2.tar.gz')
r
ver
install.packages('https://cran.r-project.org/src/contrib/Rcpp_0.12.2.tar.gz')
install.packages('https://cran.r-project.org/src/contrib/Rcpp_0.12.2.tar.gz', repos=NULL, method="libcurl"))
install.packages('https://cran.r-project.org/src/contrib/Rcpp_0.12.2.tar.gz', repos=NULL, method="libcurl")
install.packages("AppliedPredictiveModeling", dependencies = TRUE)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
View(segmentationOriginal)
View(segmentationOriginal)
seed = 125
seed.set(125)
setwd("~/GitHub/datasciencecoursera/Practical Machine Learning")
pml.training <- read.csv("~/GitHub/datasciencecoursera/Practical Machine Learning/Data/pml-training.csv", header=FALSE)
View(pml.training)
library(data.table)
library(ggplot2)
dataPML <- fread("./Data/pml-training.csv")
install.package("data.table", dependancies = TRUE)
install.packages("data.table", dependencies = TRUE)
library(data.table)
library(ggplot2)
dataPML <- fread("./Data/pml-training.csv")
setNames(dataPML, dataPML[1, : , with = FALSE])
setNames(dataPML, dataPML[1,, with = FALSE])
setNames(dataPML, dataPML[1,., with = FALSE])
setNames(dataPML, dataPML[1, with = FALSE])
setNames(dataPML, dataPML[1,])
dataPML[1,]
dataPML[1,][0]
dataPML[1,][1]
head(dataPML)
dataPML[user_name = carlitos]
dataPML[,user_name = carlitos]
head(dataPML[,user_name = NULL])
dataPML[, user_name:=NULL]
View(dataPML)
dataPML[, c("cvtd_timestamp", "raw_timestamp_part_1" ):=NULL]
View(dataPML)
dataPML[, c("V1", "new_window", "num_window" ):=NULL]
View(dataPML)
dataPML[, classe]
library(data.table)
library(ggplot2)
library(caret)
dataPML <- fread("./Data/pml-training.csv")
dataPMLtest <-fread("./Data/pml-testing.csv")
nsv <- nearZeroVar(dataPML, saveMetrics = T)
dataPML <- dataPML[, !nsv$nzv, with = FALSE]
View(dataPML)
library(data.table)
library(ggplot2)
library(caret)
dataPML <- fread("./Data/pml-training.csv")
dataPMLtest <-fread("./Data/pml-testing.csv")
nsv <- nearZeroVar(dataPML, saveMetrics = T)
dataPML <- dataPML[, !nsv$nzv, with = FALSE]
View(dataPML)
?data.table
colnames(dataPML)
library(Hmisc)
rcorr(dataPML, type="pearson")
install.packages("Hmisc", dependencies = TRUE)
library(Hmisc)
rcorr(dataPML, type="pearson")
library(Hmisc)
rcorr(as.matrix(dataPML), type="pearson")
View(dataPML)
library(Hmisc)
rcorr(as.matrix(dataPML[,3:length(dataPML)-1]), type="pearson")
library(Hmisc)
rcorr(as.matrix(dataPML[,3:length(dataPML)-1], with = FALSE), type="pearson")
library(Hmisc)
rcorr(as.matrix(dataPML[,3:length(dataPML)-1, with = FALSE]), type="pearson")
head(dataPML[,3:length(dataPML)-1, with = FALSE])
length(dataPML)
head(dataPML[,3:length(dataPML)-1, with = FALSE])
head(dataPML[,3:99, with = FALSE])
head(dataPML[,3:(length(dataPML)-1), with = FALSE])
library(Hmisc)
rcorr(as.matrix(dataPML[,(3:length(dataPML)-1), with = FALSE]), type="pearson")
library(Hmisc)
rcorr(as.matrix(dataPML[,(3:length(dataPML)-1), with = FALSE]), type="pearson", exclude.missing=TRUE)
?rcorr
library(Hmisc)
rcorr(as.matrix(dataPML[,(3:length(dataPML)-1), with = FALSE]), type="pearson", exclude.missing=TRUE)
library(Hmisc)
rcorr(as.matrix(dataPML[,(3:length(dataPML)-1), with = FALSE]), type="pearson")
dataPML[,c("V1", "user_name", "cvtd_timestamp"):=NULL]
rcorr(as.matrix(dataPML[,(3:length(dataPML)-1), with = FALSE]), type="pearson")
head(rcorr(as.matrix(dataPML[,(3:length(dataPML)-1), with = FALSE]), type="pearson"))
rcorrs <- rcorr(as.matrix(dataPML[,(3:length(dataPML)-1), with = FALSE]), type="pearson"))
rcorrs <- rcorr(as.matrix(dataPML[,(3:length(dataPML)-1), with = FALSE]), type="pearson")
View(dataPML)
?cor
?corr
?rcorr
rcorrs <- rcorr(as.matrix(dataPML[,(1:length(dataPML)-1), with = FALSE]), as.vector(dataPML[, length(dataPML), with = FALSE]) type="pearson"))
rcorrs <- rcorr(as.matrix(dataPML[,(1:length(dataPML)-1), with = FALSE]), as.vector(dataPML[, length(dataPML), with = FALSE], type="pearson"))
rcorrs <- rcorr(as.matrix(dataPML[,(1:length(dataPML)-1), with = FALSE]), as.vector(dataPML[, length(dataPML), with = FALSE]), type="pearson"))
rcorrs <- rcorr(as.matrix(dataPML[,(1:length(dataPML)-1), with = FALSE]), as.vector(dataPML[, length(dataPML), with = FALSE]), type="pearson")
rcorrs <- rcorr(as.matrix(dataPML[,(1:length(dataPML)-1), with = FALSE]), as.vector(dataPML[, length(dataPML), with = FALSE]), type="pearson")
dataPML[,(1:length(dataPML)-1), with = FALSE]
dataPML[,(1:length(dataPML)-1), with = FALSE]
length(dataPML)
1:length(dataPML)-1
1:(length(dataPML)-1)
dataPML[,96, with = FALSE]
dataPML[,97, with = FALSE]
dataPML[,1:(length(dataPML)-1), with = FALSE]
rcorrs <- rcorr(as.matrix(dataPML[,1:(length(dataPML)-1), with = FALSE]), as.vector(dataPML[, length(dataPML), with = FALSE]), type="pearson")
dataPML[, length(dataPML), with = FALSE]
as.matrix(dataPML[,1:(length(dataPML)-1), with = FALSE])
as.vector(dataPML[, length(dataPML), with = FALSE])
dataPML[, classe = 'A'] = 1
dataPML[, classe = 'A'] <- 1
dataPML[, classe == 'A'] <- 1
dataPML[, 96, with = FALSE]
dataPML[, 97, with = FALSE]
dataPML[classe = 'B',]
dataPML[classe == 'B',]
dataPML[classe == 'A', classe] <- 1
dataPML[classe == 'A', classe:= 1]
dataPML[classe == 'A', classeNum:= 1]
dataPML[classe == 'B', classeNum:= 2]
library(data.table)
library(ggplot2)
library(caret)
dataPML <- fread("./Data/pml-training.csv")
dataPMLtest <-fread("./Data/pml-testing.csv")
nsv <- nearZeroVar(dataPML, saveMetrics = T)
dataPML <- dataPML[, !nsv$nzv, with = FALSE]
View(dataPMLtest)
View(dataPML)
View(dataPML)
datePML[, c("V1", "user_name") := NULL]
dataPML[, c("V1", "user_name") := NULL]
dataPML[classe == 'A', classe:= 1]
dataPML[classe == 'B', classe:= 2]
dataPML[classe == 'C', classe:= 3]
dataPML[classe == 'D', classe:= 4]
dataPML[classe == 'E', classe:= 5]
View(dataPMLtest)
View(dataPML)
dataPML[, classe:= as.numeric(dataPML[, classe])]
dataPML[1, 97, with = FALSE]
dataPML[1, 98, with = FALSE]
type(dataPML[1, 98, with = FALSE])
typeof(dataPML[1, 98, with = FALSE])
typeof(dataPML[1, 98, with = FALSE])[1]
typeof(dataPML[1, 98, with = FALSE][1])
typeof(unlsit(dataPML[1, 98, with = FALSE]))
typeof(unlist(dataPML[1, 98, with = FALSE]))
library(data.table)
library(ggplot2)
library(caret)
dataPML <- fread("./Data/pml-training.csv")
dataPMLtest <-fread("./Data/pml-testing.csv")
nsv <- nearZeroVar(dataPML, saveMetrics = T)
dataPML <- dataPML[, !nsv$nzv, with = FALSE]
dataPML[, c("V1", "user_name", "cvtd_timestamp") := NULL]
dataPML[classe == 'A', classe:= 1]
dataPML[classe == 'B', classe:= 2]
dataPML[classe == 'C', classe:= 3]
dataPML[classe == 'D', classe:= 4]
dataPML[classe == 'E', classe:= 5]
dataPML[, classe:= as.numeric(dataPML[, classe])]
rcorrs <- rcorr(as.matrix(dataPML[,(1:length(dataPML)-1), with = FALSE]), as.vector(dataPML[, length(dataPML), with = FALSE]), type="pearson")
rcorrs <- rcorr(as.matrix(dataPML[,1:(length(dataPML)-1), with = FALSE]), as.vector(dataPML[, length(dataPML), with = FALSE]), type="pearson")
rcorrs <- rcorr(as.matrix(dataPML[,1:(length(dataPML)-1), with = FALSE]), as.vector(unlist(dataPML[, length(dataPML), with = FALSE])), type="pearson")
rcorrs
rcorrs <- data.table(rcorrs)
View(rcorrs)
rcorrs <- data.table(dataPML[, 1:(1:length(dataPML)-1), with = FALSE], dataPML[, length(dataPML), with = FALSE])
rcorrs <- data.table(dataPML[, 1:(length(dataPML)-1), with = FALSE], dataPML[, length(dataPML), with = FALSE])
View(rcorrs)
rcorrs <- data.table(cor(dataPML[, 1:(length(dataPML)-1), with = FALSE], dataPML[, length(dataPML), with = FALSE]))
?cor
rcorrs <- data.table(cor(dataPML[, 1:(length(dataPML)-1), with = FALSE], dataPML[, length(dataPML), with = FALSE], na.rm = TRUE))
rcorrs <- data.table(cor(dataPML[, 1:(length(dataPML)-1), with = FALSE], dataPML[, length(dataPML), with = FALSE], TRUE))
rcorrs <- data.table(cor(dataPML[, 1:(length(dataPML)-1), with = FALSE], dataPML[, length(dataPML), with = FALSE], use = "pairwise.complete.obs"))
setkey(rcorrs, classe)
head(classe)
head(rcorrs)
tail(rcorrs)
setorder(rcorrs, -classe)
head(rcorrs)
as.numeric("a")
as.numeric("1")
boostFit <- train(classe ~ ., method = "gbm", data = dataPML, verbose = F, trControl = trainControl(method = "cv", number = 10))
boostFit <- train(classe ~ ., method = "gbm", data = dataPML, verbose = F, trControl = trainControl(method = "cv", number = 10))
plot(boostFit, ylim = c(0.9, 1))
plot(boostFit)
boostFit[0]
boostFit
boostFit <- train(classe ~ ., method = "gbm", data = dataPML, verbose = F)
boostFit
print(boostFit)
plot(boostFit)
boostFit <- train(classe ~ ., method = "gbm", data = dataPML, verbose = F, trControl = trainControl(method = "cv", number = 10))
print(boostFit)
boostFit <- train(classe ~ ., method = "gbm", data = dataPML, verbose = F, trControl = trainControl(method = "cv", number = 100))
print(boostFit)
plot(boostFit)
?train
boostFit <- train(classe ~ ., method = "gbm", data = dataPML, verbose = F, trControl = trainControl(method = "adaptive_cv", number = 50))
boostFit <- train(classe ~ ., method = "gbm", data = dataPML, verbose = F, trControl = trainControl(method = "adaptive_cv", number = 50))
boostFit <- train(classe ~ ., method = "gbm", data = dataPML, verbose = F, trControl = trainControl(method = "adaptive_boot", number = 50))
boostFit <- train(classe ~ ., method = "gbm", data = dataPML, verbose = F, trControl = trainControl(method = "cv", number = 50))
boostFit
boostFit <- train(classe ~ ., method = "gbm", data = dataPML, verbose = F, trControl = trainControl(method = "adaptive_cv"))
boostFit <- train(classe ~ ., method = "gbm", data = dataPML, verbose = F, trControl = trainControl(method = "adaptive_cv", repeats = 5))
boostFit <- train(classe ~ ., method = "gbm", data = dataPML, verbose = F, trControl = trainControl(method = "adaptive_cv", repeats = 5, verboseIter = TRUE))
boostFit <- train(classe ~ ., method = "gbm", data = dataPML, verbose = F, trControl = trainControl(method = "boot"))
boostFit
boostFit <- train(classe ~ ., method = "gbm", data = dataPML, verbose = F, trControl = trainControl(method = "cv", number = 50))
summary(boostFit)
boostFit
boostFit <- train(classe ~ ., method = "nnet", data = dataPML, verbose = F, trControl = trainControl(method = "cv", number = 50))
boostFit
boostFit <- train(classe ~ ., method = "nnet", data = dataPML, verbose = F)
boostFit
summary(boostFit)
plot(boostFit)
library(nnet)
fit <- nnet(classe~., data=dataPML, decay=0.0001, maxit=500)
fit <- nnet(classe~., data=dataPML, size = length(dataPML),decay=0.0001, maxit=500)
fit <- nnet(classe~., data=dataPML, size = length(dataPML)-1,decay=0.0001, maxit=500)
dataPML <- fread("./Data/pml-training.csv")
dataPMLtest <-fread("./Data/pml-testing.csv")
nsv <- nearZeroVar(dataPML, saveMetrics = T)
dataPML <- dataPML[, !nsv$nzv, with = FALSE]
dataPML[, c("V1", "user_name", "cvtd_timestamp") := NULL]
boostFit <- train(classe ~ ., method = "ada", data = dataPML, verbose = F, trControl = trainControl(method = "cv", number = 100))
install.packages("e1071", dependencies = TRUE)
boostFit <- train(classe ~ ., method = "ada", data = dataPML, verbose = F, trControl = trainControl(method = "cv", number = 100))
boostFit <- train(classe ~ ., method = "ada", data = dataPML)
warnings()
boostFit <- train(classe ~ ., method = "rpart", data = dataPML, verbose = F, trControl = trainControl(method = "cv", number = 100))
boostFit <- train(classe ~ ., method = "naiveBayes", data = dataPML, verbose = F, trControl = trainControl(method = "cv", number = 100))
boostFit <- train(classe ~ ., method = "gmb", data = dataPML, verbose = F, trControl = trainControl(method = "cv", number = 100))
boostFit <- train(classe ~ ., method = "gbm", data = dataPML, verbose = F, trControl = trainControl(method = "cv", number = 100))
boostFit <- train(classe ~ ., method = "gbm", data = dataPML, verbose = F, trControl = trainControl(method = "cv", number = 50))
boostFit
plot(boostFit)
summary(boostFit)
plot(boostFit, ylim = c(0.9, 1))
rfFit <- train(classe ~ ., method = "rf", data = training, importance = T, trControl = trainControl(method = "cv", number = 10))
rfFit <- train(classe ~ ., method = "rf", data = dataPLM, importance = T, trControl = trainControl(method = "cv", number = 10))
rfFit <- train(classe ~ ., method = "rf", data = dataPML, importance = T, trControl = trainControl(method = "cv", number = 10))
rfFit
summary(rfFit)
plot(rfFit)
dataPML[classe == 'A', classe:= '1']
dataPML[classe == 'B', classe:= '2']
dataPML[classe == 'C', classe:= '3']
dataPML[classe == 'D', classe:= '4']
dataPML[classe == 'E', classe:= '5']
dataPML[, classe:= as.numeric(dataPML[, classe])]
rfFit <- train(classe ~ ., method = "rf", data = dataPML, importance = T, trControl = trainControl(method = "cv", number = 10))
rfFit
library(data.table)
library(ggplot2)
library(caret)
dataPML <- fread("./Data/pml-training.csv")
dataPMLtest <-fread("./Data/pml-testing.csv")
nsv <- nearZeroVar(dataPML, saveMetrics = T)
dataPML <- dataPML[, !nsv$nzv, with = FALSE]
dataPML[, c("V1", "user_name", "cvtd_timestamp") := NULL]
View(dataPML)
names(dataPML)
dataPML[,names(dataPML)[6:23]:=NULL]
View(dataPML)
library(data.table)
library(ggplot2)
library(caret)
dataPML <- fread("./Data/pml-training.csv")
dataPMLtest <-fread("./Data/pml-testing.csv")
nsv <- nearZeroVar(dataPML, saveMetrics = T)
dataPML <- dataPML[, !nsv$nzv, with = FALSE]
dataPML[, c("V1", "user_name", "cvtd_timestamp") := NULL]
names(dataPML)
dataPML[,names(dataPML)[8:23]:=NULL]
View(dataPMLtest)
View(dataPML)
names(dataPML)
dataPML[,names(dataPML)[31:34]:=NULL]
View(dataPML)
dataPML[,sum(is.na(.SD)), by = names(dataPML)]
is.na(data.PML)
is.na(dataPML)
head(is.na(dataPML))
size(dataPML)
length(dataPML)
View(dataPML)
sum(is.na(dataPML))
colsum(is.na(dataPML))
colSums(is.na(dataPML))
colSums(colSums(is.na(dataPML)))
head(colSums(is.na(dataPML)))
system.time(dataPML[,lapply(is.na(.SD),sum),.SDcols=names(dataPML)])
dataPML[,lapply(is.na(.SD),sum),.SDcols=names(dataPML)]
names(dataPML)
length(rows(dataPML))
length(rownames(dataPML))
dataPML[,which(colSums(is.na(dataPML)) > length(rownames(dataPML))), with = FALSE]
dataPML[,which(colSums(is.na(dataPML)) > 0.8 * length(rownames(dataPML))), with = FALSE]
dataPML[,which(colSums(is.na(dataPML)) > 0.8 * length(rownames(dataPML))) := NULL, with = FALSE]
View(dataPML)
length(dataPML)
library(data.table)
library(ggplot2)
library(caret)
dataPML <- fread("./Data/pml-training.csv")
dataPMLtest <-fread("./Data/pml-testing.csv")
nsv <- nearZeroVar(dataPML, saveMetrics = T)
dataPML <- dataPML[, !nsv$nzv, with = FALSE]
dataPML[, c("V1", "user_name", "cvtd_timestamp") := NULL]
dataPML[,which(colSums(is.na(dataPML)) > 0.8 * length(rownames(dataPML))) := NULL, with = FALSE]
boostFit <- train(classe ~ ., method = "gbm", data = dataPML, verbose = F, trControl = trainControl(method = "adaptive_boot", number = 50))
boostFit <- train(classe ~ ., method = "gbm", data = dataPML, verbose = F, trControl = trainControl(method = "adaptive_boot"))
length(rownames(dataPML))
boostFit <- train(classe ~ ., method = "gbm", data = dataPML, verbose = F, trControl = trainControl(method = "cv", number = 10))
View(dataPML)
boostFit <- train(classe ~ ., method = "gbm", data = dataPML, verbose = T, trControl = trainControl(method = "cv", number = 10))
library(doMC)
install.packages("doMC", dependencies = TRUE)
library(doMC)
registerDoMC(cores = 4)
boostFit <- train(classe ~ ., method = "gbm", data = dataPML, verbose = T, trControl = trainControl(method = "cv", number = 10))
boostFit
predict(boostFit, dataPMLtest)
predict <- predict(boostFit, dataPMLtest)
summary(predict)
prediction <- predict(boostFit, dataPMLtest)
summary(prediction)
plot(prediction)
prediction <- predict(boostFit, dataPMLtest[,names(dataPML)])
dataPMLtest[, c("V1", "user_name", "cvtd_timestamp") := NULL]
prediction <- predict(boostFit, dataPMLtest[,names(dataPML)])
View(dataPMLtest)
View(dataPML)
View(dataPMLtest)
View(dataPML)
View(dataPMLtest)
prediction <- predict(boostFit, dataPMLtest[,names(dataPML), with = FALSE])
dataPMLtest[, classe]
dataPMLtest[, classe]
dataPMLtest[, yaw_belt]
prediction <- predict(boostFit, dataPMLtest)
summary (prediction)
(prediction <- as.character(predict(rfFit, testing)))
(prediction <- as.character(predict(rfFit, dataPMLtest)))
(prediction <- as.character(predict(boostFit, dataPMLtest)))
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("./prediction/problem_id_", i, ".txt")
write.table(x[i], file = filename, quote = FALSE, row.names = FALSE, col.names = FALSE)
}
}
pml_write_files(prediction)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("./prediction/problem_id_", i, ".txt")
write.table(x[i], file = filename, quote = FALSE, row.names = FALSE, col.names = FALSE)
}
}
pml_write_files(prediction)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("./problem_id_", i, ".txt")
write.table(x[i], file = filename, quote = FALSE, row.names = FALSE, col.names = FALSE)
}
}
pml_write_files(prediction)
nnetModel <- train(classe ~ ., method = "nnet", data = dataPML)
nnetModel
plot nnetModel
plot (nnetModel)
nnetModel <- train(classe ~ ., method = "nnet", data = dataPML, decay=0.0001, maxit=500)
nnetModel <- train(classe ~ ., method = "nnet", trControl = trainControl(method = "cv", number = 10), data = dataPML, decay=0.0001, maxit=500)
nnetModel <- train(classe ~ ., method = "nnet", data = dataPML, trControl = trainControl(method = "cv", number = 10) )
nnetModel
nnetModel <- train(classe ~ ., method = "nnet", data = dataPML, maxiter = 500, decay = 0.0001, trControl = trainControl(method = "cv", number = 10) )
nnetModel <- train(classe ~ ., method = "nnet", data = dataPML, decay = 0.0001, trControl = trainControl(method = "cv", number = 10) )
randomForestModel <- train(classe ~ ., method = "rf", data = training, importance = T, trControl = trainControl(method = "cv", number = 10))
randomForestModel <- train(classe ~ ., method = "rf", data = dataPML, importance = T, trControl = trainControl(method = "cv", number = 10))
registerDoMC(cores = 4)
randomForestModel <- train(classe ~ ., method = "rf", data = dataPML, importance = T, trControl = trainControl(method = "cv", allowParallel = TRUE))
randomForestModel <- train(classe ~ ., method = "rf", data = dataPML, importance = T, trControl = trainControl(method = "none", allowParallel = TRUE))
randomForestModel <- train(classe ~ ., method = "rf", data = dataPML, importance = T, trControl = trainControl(method = "cv", number = 3, allowParallel = TRUE))
randomForestModel
randomForestModel <- train(classe ~ ., method = "rf", data = dataPML, importance = T, trControl = trainControl(mtry = 28, allowParallel = TRUE))
randomForestModel <- train(classe ~ ., method = "rf", data = dataPML, importance = T, mtry = 28, trControl = trainControl(method="none", allowParallel = TRUE))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(data.table)
library(ggplot2)
library(caret)
library(doMC)
registerDoMC(cores = 4)
dataPML <- fread("./Data/pml-training.csv")
dataPMLtest <-fread("./Data/pml-testing.csv")
nsv <- nearZeroVar(dataPML, saveMetrics = T)
dataPML <- dataPML[, !nsv$nzv, with = FALSE];
dataPML[, c("V1", "user_name", "cvtd_timestamp") := NULL];
dataPMLtest[, c("V1", "user_name", "cvtd_timestamp") := NULL];
dataPML[,which(colSums(is.na(dataPML)) > 0.8 * length(rownames(dataPML))) := NULL, with = FALSE];
source('~/.active-rstudio-document', echo=TRUE)
install.pandoc()
install.packages("pandoc", dependencies = TRUE)
LANG='en_US.UTF-8'
install.packages("knitr", dependencies = TRUE)
install.packages("knitr", dependencies = TRUE)
install.packages("rmarkdown", dependencies = TRUE)
Sys.setenv(LANG="en_US.UTF-8")
Sys.setenv(LANG="en_US.UTF-8")
Sys.setenv(LANG="en_US.UTF-8")
LANG
restart
